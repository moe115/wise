generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int        @id @unique @default(autoincrement())
  email     String?    @unique
  createdAt DateTime   @default(now())
  role      String?
  volunteer Volunteer?
}

model Volunteer {
  volId           Int         @id @unique @default(autoincrement())
  typeV           String?
  phone           String?
  AvailabilityV   String?
  ReputationScore Decimal
  CategoryV       String?
  userId          Int         @unique
  Citizen         Citizen?
  ngo             NGO?
  PROVIDES        PROVIDES[]
  TESTIMONY       TESTIMONY[]
  USER            User        @relation(fields: [userId], references: [id])
}

model Citizen {
  CitizenId Int       @id @unique @default(autoincrement())
  firstname String?
  lastname  String?
  citvolId  Int       @unique
  VOL       Volunteer @relation(fields: [citvolId], references: [volId])
}

model NGO {
  NGOId    Int       @id @unique @default(autoincrement())
  ngoName  String?
  ngovolId Int       @unique
  VOLL     Volunteer @relation(fields: [ngovolId], references: [volId])
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model spatial_ref_sys {
  srid      Int     @id
  auth_name String? @db.VarChar(256)
  auth_srid Int?
  srtext    String? @db.VarChar(2048)
  proj4text String? @db.VarChar(2048)
}

model Crisis {
  CrisisId      Int                      @id @default(autoincrement())
  Crisisname    String
  area          Unsupported("geometry")?
  CrisisDesc    String
  CrisisStart   DateTime?
  CrisisEnd     DateTime?
  CrisisCountry String?
  TypeC         String?
  Damage        Damage[]
}

model Damage {
  DamageID             Int                      @id @default(autoincrement())
  CategoryD            String
  StartDateD           DateTime?                @db.Date
  EndDateD             DateTime?                @db.Date
  FinancialEstimationD Decimal?                 @db.Decimal(15, 2)
  CrisisID             Int?
  Description          String?
  GeoLonglat           Unsupported("geometry")?
  Radius               Float?
  City                 String?
  Crisis               Crisis?                  @relation(fields: [CrisisID], references: [CrisisId], onDelete: Cascade, onUpdate: NoAction)
  SERVICE              SERVICE[]
  TESTIMONY            TESTIMONY[]
}

model TESTIMONY {
  testimonyId Int       @id @default(autoincrement())
  contentT    String    @db.VarChar(1000)
  dateT       DateTime? @default(now()) @db.Timestamp(6)
  mediaURL    String?   @db.VarChar(500)
  damageId    Int
  volunteerId Int
  Damage      Damage    @relation(fields: [damageId], references: [DamageID], onDelete: Cascade, onUpdate: NoAction, map: "fk_damage")
  Volunteer   Volunteer @relation(fields: [volunteerId], references: [volId], onDelete: Cascade, onUpdate: NoAction, map: "fk_volunteer")
}

model SERVICE {
  ServiceID          Int        @id @default(autoincrement())
  CategoryS          String?    @db.VarChar(50)
  DescriptionS       String?    @db.VarChar(1000)
  StatusS            String?    @db.VarChar(50)
  CostEstimateS      Decimal?   @db.Decimal(15, 2)
  CompletionDateS    DateTime?  @db.Date
  ValidityStartS     DateTime?  @db.Date
  ValidityEndS       DateTime?  @db.Date
  EstimatedDurationS String?    @db.VarChar(50)
  DamageID           Int
  PROVIDES           PROVIDES[]
  Damage             Damage     @relation(fields: [DamageID], references: [DamageID], onDelete: Cascade, onUpdate: NoAction, map: "fk_damage_service")
}

model PROVIDES {
  VolunteerID Int
  ServiceID   Int
  SERVICE     SERVICE   @relation(fields: [ServiceID], references: [ServiceID], onDelete: Cascade, onUpdate: NoAction, map: "fk_provides_service")
  Volunteer   Volunteer @relation(fields: [VolunteerID], references: [volId], onDelete: Cascade, onUpdate: NoAction, map: "fk_provides_volunteer")

  @@id([VolunteerID, ServiceID])
}
