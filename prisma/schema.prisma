// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
//npx prisma migrate dev --name init
// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
// https://pris.ly/ppg-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int         @id @unique @default(autoincrement())
  email     String?     @unique 
  createdAt DateTime    @default(now())
  role      String?

  // ðŸ‘‡ One-to-one or one-to-many relation with Volunteer
  volunteer Volunteer?
}

model Volunteer {
  volId           Int       @id @unique @default(autoincrement())
  typeV           String?
  phone           String?
  AvailabilityV   String?
  ReputationScore Decimal
  CategoryV       String?
  userId          Int @unique 

  // ðŸ‘‡ Relation to User (each volunteer belongs to one user)
  USER            User      @relation(fields: [userId], references: [id])

  // ðŸ‘‡ Back-relation from Citizen and NGO
  citizen         Citizen?
  ngo             NGO?
}

model Citizen {
  CitizenId Int       @id @unique @default(autoincrement())
  firstname String?
  lastname  String?
  citvolId  Int @unique 

  // ðŸ‘‡ Relation to Volunteer
  VOL       Volunteer @relation(fields: [citvolId], references: [volId])
 
}

model NGO {
  CitizenId Int       @id @unique @default(autoincrement())
  ngoName   String?
  ngovolId  Int @unique 

  // ðŸ‘‡ Relation to Volunteer
  VOLL      Volunteer @relation(fields: [ngovolId], references: [volId])

 }
